import scala.slick.driver.PostgresDriver.simple._

object ConnectionWorksheet {
	/*val session = Sandbox.database.createSession
  val pquery = tableToQuery(Supplier) map (s => s.snum ~ s.sname)
  pquery.selectStatement


  val query = tableToQuery(Supplier)
  query.selectStatement
  query.first()(session)
	query.foreach( println(_) )(session)

	val rquery = Supplier.filter(p => p.city === "London")
	rquery.selectStatement
	rquery.foreach(println(_))(session)
	
	val prquery = Supplier.filter( _.city === "London").map(_.sname)
	prquery.selectStatement
	prquery.foreach( println(_) )(session)
	
	val uquery = Supplier.filter(p => p.sname === "Clark" || p.sname === "Adams").map(_.city)
	uquery.updateStatement
	uquery.update("Rome")(session)
	
	Supplier.map(s => s.snum ~ s.sname).foreach(println(_))(session)
	query.foreach(println(_))(session)

	val projection = Supplier.snum ~ Supplier.city ~ Supplier.sname ~ Supplier.status
	projection.insertStatement
	projection.insert("S6", "Mount Prospect", "Me!", 30)(session)
	query.foreach(println(_))(session)
	
	val dquery = Supplier.filter( _.snum === "S6" )
	dquery.deleteStatement
	dquery.delete(session)
	
	session.close()*/
	import scala.slick.driver.PostgresDriver.simple._
import Database.threadLocalSession

object Cities extends Table[(Int, String, String, String, Int)]("city") {
  def id = column[Int]("id", O.PrimaryKey)
  def name = column[String]("name")
  def country = column[String]("countrycode")
  def district = column[String]("district")
  def population = column[Int]("population")
  def * = id ~ name ~ country ~ district ~ population
}

val mysql = Database.forURL(
    "jdbc:mysql://localhost/slick",
    user = "indyscala",
    driver = "com.mysql.jdbc.Driver")             //> mysql  : scala.slick.session.Database = scala.slick.session.Database$$anon$
                                                  //| 2@6c15f918

val db = mysql                                    //> db  : scala.slick.session.Database = scala.slick.session.Database$$anon$2@6
                                                  //| c15f918

db withSession {
  println("\nFirst 5 cities returned:")
  val q1 = Query(Cities)

  // becomes LIMIT 5 in SQL
  q1 take(5) foreach {
      println(_)
  }

  println("\nCities in Indiana:")
  val q2 = for ( c <- Cities; if c.district === "Indiana") yield (c.id, c.name)
  q2.list foreach {
      println(_)
  }
}                                                 //> 
                                                  //| First 5 cities returned:
                                                  //| SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
                                                  //| SLF4J: Defaulting to no-operation (NOP) logger implementation
                                                  //| SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further d
                                                  //| etails.
                                                  //| java.sql.SQLException: Access denied for user 'indyscala'@'localhost' (usin
                                                  //| g password: NO)
                                                  //| 	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1078)
                                                  //| 	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4190)
                                                  //| 	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4122)
                                                  //| 	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:927)
                                                  //| 	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(My
                                                  //| sqlIO.java:1709)
                                                  //| 	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1252)
                                                  //| 	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2486)
                                                  //| 	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2
                                                  //| 519)
                                                  //| 	at com.mysql.jdbc.Co
                                                  //| Output exceeds cutoff limit.
}