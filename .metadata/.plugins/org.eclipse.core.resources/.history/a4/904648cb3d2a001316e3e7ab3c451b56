package week3

object rationals {
	val x = new Rational(1, 3)
	val y = new Rational(5, 7)
	val z = new Rational(3, 2)
	x.numer
	x.denom
	x + y
	x.neg
	
	x sub y sub z
	
	y + y
	
	x.less(y)
	x.max(y)
	
	val strange = new Rational(1, 0)
	strange + strange
}

class Rational(x: Int, y: Int) {
	require(y != 0, "denominator must not be zero")

	def this(x: Int) = this(x, 1)

	private def gcd(a: Int, b: Int): Int = if( b == 0) a else gcd(b, a % b)
	val numer = x / gcd(x, y)
	val denom = y / gcd(x, y)
	
	def less( that: Rational ) = numer * that.denom < that.numer * denom
	
	def max(that: Rational) = if(this.less(that)) that else this
	
	def +(that: Rational) =
		new Rational( numer * that.denom + that.numer * denom,
									denom * that.denom)
	
	def neg: Rational = new Rational(numer * -1, denom)
	
	def sub(that: Rational) =
		this + that.neg
	
	override def toString = numer + "/" + denom
}